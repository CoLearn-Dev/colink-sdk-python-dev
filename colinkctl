

#!/bin/bash
set -e

install() {
    read -r -p "Install dependencies? [Y/n] " response
    case "$response" in
        [nN][oO]|[nN])
            ;;
        *)
            sudo apt update && sudo apt install git g++ cmake pkg-config libssl-dev protobuf-compiler -y
            if ! [ -x "$(command -v cargo)" ]; then
                curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
                source $HOME/.cargo/env
            fi
            read -r -p "Install RabbitMQ? [Y/n] " response
            case "$response" in
                [nN][oO]|[nN])
                    ;;
                *)
                    sudo apt install rabbitmq-server -y
                    sudo rabbitmq-plugins enable rabbitmq_management
                    sudo systemctl restart rabbitmq-server.service
                    ;;
            esac
            ;;
    esac

    if ! [ -f "./mq_prefix.txt" ]; then
        echo -n "colink-dev-script-$RANDOM" > mq_prefix.txt
    fi
    if ! [ -d "./colink-server-dev" ]; then
        git clone --recursive git@github.com:CoLearn-Dev/colink-server-dev.git
    fi
    cd colink-server-dev
    cargo build --all-targets
    cd ..
    if ! [ -d "./colink-sdk-a-rust-dev" ]; then
        git clone --recursive git@github.com:CoLearn-Dev/colink-sdk-a-rust-dev.git
    fi
    cd colink-sdk-a-rust-dev
    cargo build --all-targets
    cd ..
    if ! [ -d "./colink-sdk-p-rust-dev" ]; then
        git clone --recursive git@github.com:CoLearn-Dev/colink-sdk-p-rust-dev.git
    fi
    cd colink-sdk-p-rust-dev
    cargo build --all-targets
    cd ..
    if ! [ -d "./colink-protocol-policy-module-dev" ]; then
        git clone --recursive git@github.com:CoLearn-Dev/colink-protocol-policy-module-dev.git
    fi
    cd colink-protocol-policy-module-dev
    cargo build --all-targets
    cd ..
    if ! [ -d "./colink-protocol-remote-storage-dev" ]; then
        git clone --recursive git@github.com:CoLearn-Dev/colink-protocol-remote-storage-dev.git
    fi
    cd colink-protocol-remote-storage-dev
    cargo build --all-targets
    cd ..
}

start() {
    mq_prefix=`cat mq_prefix.txt`
    cd colink-server-dev
    if [ -f "./pid.txt" ]; then
        pid=`cat pid.txt`
        if ps -p $pid > /dev/null ; then
            echo "colink server already started."
            cd ..
            return
        fi
    fi
    read -r -p "Enter the port to bind the colink server [8080]:" port
    port=${port:-8080}
    nohup cargo run -- --address "0.0.0.0" --port $port --mq-amqp amqp://guest:guest@localhost:5672 --mq-api http://guest:guest@localhost:15672/api --mq-prefix $mq_prefix >/dev/null 2>&1 & echo -n $! > pid.txt
    pid=`cat pid.txt`
    for i in {1..600}; do
        sleep 0.1
        port_pid=`lsof -i:${port} | grep 'LISTEN' | awk '{print $2}'`
        if [[ -n ${port_pid} && ${port_pid} == ${pid} ]]; then
            echo "colink server start sucessfully."
            break
        fi
    done
    echo $port > port.txt
    host_token=`cat host_token.txt`
    echo "host_token: ${host_token}"
    cp port.txt ../
    cp host_token.txt ../
    cd ..
    if [ -f "./user_token.txt" ]; then
        rm user_token.txt
    fi
}

stop() {
    cd colink-server-dev
    if [ -f "./pid.txt" ]; then
        pid=`cat pid.txt`
        if ps -p $pid > /dev/null ; then
            kill -9 $pid
        else
            echo "colink server already stopped."
        fi
    else
        echo "colink server already stopped."
    fi
    cd ..
}

status() {
    cd colink-server-dev
    echo "colink server:"
    if [ -f "./pid.txt" ]; then
        pid=`cat pid.txt`
        if ps -p $pid > /dev/null ; then
            echo "`ps aux | grep ${pid} | grep -v grep`"
        else
            echo "colink server is stopped."
        fi
    else
        echo "colink server is stopped."
    fi
    cd ..
    status_protocol colink-protocol-policy-module-dev
    status_protocol colink-protocol-remote-storage-dev
}

create_users() {
    port=`cat port.txt`
    host_token=`cat host_token.txt`
    cd colink-sdk-a-rust-dev
    read -p "number of users to create [2]:" user_num
    user_num=${user_num:-2}
    cargo run --example host_import_users_and_exchange_guest_jwts http://127.0.0.1:$port $host_token $user_num > user_token.txt
    cat user_token.txt
    cat user_token.txt >> ../user_token.txt
    cd ..
}

start_protocol() {
    if ! [ -f "./user_token.txt" ]; then
        echo "please create users first."
        cd ..
        return
    fi
    port=`cat port.txt`
    dir=$1
    cd $dir
    if [ -f "./pid.txt" ]; then
        echo "protocol ${dir} already started."
        cd ..
        return
    fi
    cargo build --all-targets
    cat ../user_token.txt | while read line
    do
        nohup cargo run -- --addr http://127.0.0.1:$port --jwt $line >/dev/null 2>&1 & echo $! >> pid.txt
    done
    sleep 1
    cat ./pid.txt | while read pid
    do
        if ps -p $pid > /dev/null ; then
            echo "pid ${pid} started."
        fi
    done
    cd ..
}

stop_protocol() {
    dir=$1
    cd $dir
    if ! [ -f "./pid.txt" ]; then
        echo "protocol ${dir} already stopped."
        cd ..
        return
    fi
    cat ./pid.txt | while read pid
    do
        if ps -p $pid > /dev/null ; then
            kill -9 $pid
        fi
    done
    rm pid.txt
    cd ..
}

status_protocol() {
    dir=$1
    cd $dir
    if ! [ -f "./pid.txt" ]; then
        echo "protocol ${dir} is stopped."
        cd ..
        return
    fi
    echo "protocol ${dir}:"
    cat ./pid.txt | while read pid
    do
        if ps -p $pid > /dev/null ; then
            echo "`ps aux | grep ${pid} | grep -v grep`"
        else
            echo "pid ${pid} is stopped."
        fi
    done
    cd ..
}

_enable_policy_module() {
    port=`cat port.txt`
    cd colink-protocol-policy-module-dev
    cat ../user_token.txt | while read line
    do
        cargo run --example start_policy_module http://127.0.0.1:$port $line
        cargo run --example accept_all_tasks http://127.0.0.1:$port $line
    done
    cd ..
}

enable_dev_env() {
    read -r -p "Are you want to (re)start the colink server? [Y/n] " response
    case "$response" in
        [nN][oO]|[nN])
            ;;
        *)
            stop
            start
            ;;
    esac

    read -r -p "Are you want to create users? [Y/n] " response
    case "$response" in
        [nN][oO]|[nN])
            ;;
        *)
            create_users
            ;;
    esac

    read -r -p "Are you want to (re)start the policy module and accept all tasks? [Y/n] " response
    case "$response" in
        [nN][oO]|[nN])
            ;;
        *)
            stop_protocol colink-protocol-policy-module-dev
            start_protocol colink-protocol-policy-module-dev
            _enable_policy_module
            ;;
    esac

    read -r -p "Are you want to (re)start the remote storage? [Y/n] " response
    case "$response" in
        [nN][oO]|[nN])
            ;;
        *)
            stop_protocol colink-protocol-remote-storage-dev
            start_protocol colink-protocol-remote-storage-dev
            ;;
    esac
}

disable_dev_env() {
    stop
    stop_protocol colink-protocol-policy-module-dev
    stop_protocol colink-protocol-remote-storage-dev
}

get_token() {
    echo "host_token:"
    cat host_token.txt
    echo ""
    echo "users:"
    cat user_token.txt
}

if [ -z $COLINK_HOME ]; then
    COLINK_HOME="$HOME/.colink"
fi
mkdir -p $COLINK_HOME
cd $COLINK_HOME

case "$1" in
    install)
        install
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    restart)
        stop
        start
        ;;
    create_users)
        create_users
        ;;
    start_protocol)
        if [ ! -n "$2" ]; then
            echo "usage: colinkctl start_protocol directory"
            exit -1
        fi
        start_protocol $2
        ;;
    stop_protocol)
        if [ ! -n "$2" ]; then
            echo "usage: colinkctl stop_protocol directory"
            exit -1
        fi
        stop_protocol $2
        ;;
    status_protocol)
        if [ ! -n "$2" ]; then
            echo "usage: colinkctl status_protocol directory"
            exit -1
        fi
        status_protocol $2
        ;;
    restart_protocol)
        if [ ! -n "$2" ]; then
            echo "usage: colinkctl restart_protocol directory"
            exit -1
        fi
        stop_protocol $2
        start_protocol $2
        ;;
    enable_dev_env)
        enable_dev_env
        ;;
    disable_dev_env)
        disable_dev_env
        ;;
    get_token)
        get_token
        ;;
    *)
        echo "usage: colinkctl {install|start|stop|status|restart|create_users|start_protocol|stop_protocol|status_protocol|restart_protocol|get_token|enable_dev_env|disable_dev_env}"
        exit -1
esac